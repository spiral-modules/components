<?php
/**
 * Spiral Framework.
 *
 * @license   MIT
 * @author    Anton Titov (Wolfy-J)
 */
namespace Spiral\Pagination;

use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\UriInterface;

/**
 * Default paginator implementation, uses active server request Uri to generate page urls.
 */
class Paginator implements PredictableInterface, \Countable
{
    /**
     * Default limit value.
     */
    const DEFAULT_LIMIT = 25;

    /**
     * Default page parameter.
     */
    const DEFAULT_PARAMETER = 'page';

    /**
     * The query array will be connected to every page URL generated by paginator.
     *
     * @var array
     */
    private $queryData = [];

    /**
     * @var string
     */
    private $pageParameter = 'page';

    /**
     * @var int
     */
    private $pageNumber = 1;

    /**
     * @var int
     */
    private $countPages = 1;

    /**
     * @var int
     */
    private $limit = self::DEFAULT_LIMIT;

    /**
     * @var int
     */
    private $count = 0;

    /**
     * @invisible
     * @var ServerRequestInterface
     */
    private $request = null;

    /**
     * @var UriInterface
     */
    private $uri = null;

    /**
     * {@inheritdoc}
     */
    public function __construct(
        ServerRequestInterface $request,
        $pageParameter = self::DEFAULT_PARAMETER
    ) {
        $this->setRequest($request);
        $this->setParameter($pageParameter);
    }

    /**
     * @param ServerRequestInterface $request
     */
    public function setRequest(ServerRequestInterface $request)
    {
        $this->request = $request;
        $this->uri = $request->getUri();
    }

    /**
     * {@inheritdoc}
     */
    public function setUri(UriInterface $uri)
    {
        $this->uri = $uri;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function getUri()
    {
        return $this->uri;
    }

    /**
     * Specify the query (as array) which will be attached to every generated page URL.
     *
     * @param array $query
     * @param bool  $replace Replace existed query data entirely.
     */
    public function setQuery(array $query, $replace = false)
    {
        $this->queryData = $replace ? $query : $query + $this->queryData;
    }

    /**
     * @return array
     */
    public function getQuery()
    {
        return $this->queryData;
    }

    /**
     * Update page parameter name from request query. Page number should be fetched from queryParams
     * of provided request instance.
     *
     * @param string $pageParameter
     * @return self
     */
    public function setParameter($pageParameter)
    {
        $this->pageParameter = $pageParameter;
        $queryParams = $this->request->getQueryParams();
        if (isset($queryParams[$this->pageParameter])) {
            $this->setPage($queryParams[$this->pageParameter]);
        }

        return $this;
    }

    /**
     * Get page query parameter name.
     *
     * @return string
     */
    public function getParameter()
    {
        return $this->pageParameter;
    }

    /**
     * {@inheritdoc}
     */
    public function setCount($count)
    {
        $this->count = abs(intval($count));
        if ($this->count > 0) {
            $this->countPages = ceil($this->count / $this->limit);
        } else {
            $this->countPages = 1;
        }

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function count()
    {
        return $this->count;
    }

    /**
     * Set pagination limit.
     *
     * @param int $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->limit = abs(intval($limit));
        if ($this->count > 0) {
            $this->countPages = ceil($this->count / $this->limit);
        } else {
            $this->countPages = 1;
        }

        return $this;
    }

    /**
     * Get pagination limit (items per page).
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->limit;
    }

    /**
     * {@inheritdoc}
     */
    public function setPage($number)
    {
        $this->pageNumber = abs(intval($number));

        //Real page number
        return $this->getPage();
    }

    /**
     * {@inheritdoc}
     */
    public function getPage()
    {
        if ($this->pageNumber < 1) {
            return 1;
        }

        if ($this->pageNumber > $this->countPages) {
            return $this->countPages;
        }

        return $this->pageNumber;
    }

    /**
     * Get pagination offset.
     *
     * @return int
     */
    public function getOffset()
    {
        return ($this->getPage() - 1) * $this->limit;
    }

    /**
     * The count of pages required to represent all records using a specified limit value.
     *
     * @return int
     */
    public function countPages()
    {
        return $this->countPages;
    }

    /**
     * {@inheritdoc}
     */
    public function countDisplayed()
    {
        if ($this->getPage() == $this->countPages) {
            return $this->count - $this->getOffset();
        }

        return $this->limit;
    }

    /**
     * {@inheritdoc}
     */
    public function isRequired()
    {
        return ($this->countPages > 1);
    }

    /**
     * {@inheritdoc}
     */
    public function nextPage()
    {
        if ($this->getPage() != $this->countPages) {
            return $this->getPage() + 1;
        }

        return false;
    }

    /**
     * {@inheritdoc}
     */
    public function previousPage()
    {
        if ($this->getPage() > 1) {
            return $this->getPage() - 1;
        }

        return false;
    }

    /**
     * {@inheritdoc}
     */
    public function paginate(PaginableInterface $paginable)
    {
        $this->setCount($paginable->count());

        $paginable->offset($this->getOffset());
        $paginable->limit($this->getLimit());

        return $paginable;
    }

    /**
     * {@inheritdoc}
     */
    public function uri($pageNumber)
    {
        return $this->uri->withQuery(http_build_query(
            $this->getQuery() + [$this->pageParameter => $pageNumber]
        ));
    }
}